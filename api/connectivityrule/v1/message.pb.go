// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: temporal/api/cloud/connectivityrule/v1/message.proto

package connectivityrule

import (
	v1 "go.temporal.io/cloud-sdk/api/resource/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConnectivityRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the private connectivity rule.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The connectivity rule specification.
	Spec *ConnectivityRuleSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// The current version of the connectivity rule specification.
	// The next update operation will have to include this version.
	ResourceVersion string           `protobuf:"bytes,4,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	State           v1.ResourceState `protobuf:"varint,5,opt,name=state,proto3,enum=temporal.api.cloud.resource.v1.ResourceState" json:"state,omitempty"`
	// The id of the async operation that is creating/updating/deleting the connectivity rule, if any.
	AsyncOperationId string `protobuf:"bytes,6,opt,name=async_operation_id,json=asyncOperationId,proto3" json:"async_operation_id,omitempty"`
	// The date and time when the connectivity rule was created.
	CreatedTime   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectivityRule) Reset() {
	*x = ConnectivityRule{}
	mi := &file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectivityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectivityRule) ProtoMessage() {}

func (x *ConnectivityRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectivityRule.ProtoReflect.Descriptor instead.
func (*ConnectivityRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *ConnectivityRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectivityRule) GetSpec() *ConnectivityRuleSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ConnectivityRule) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ConnectivityRule) GetState() v1.ResourceState {
	if x != nil {
		return x.State
	}
	return v1.ResourceState(0)
}

func (x *ConnectivityRule) GetAsyncOperationId() string {
	if x != nil {
		return x.AsyncOperationId
	}
	return ""
}

func (x *ConnectivityRule) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

// The connectivity rule specification passed in on create/update operations.
type ConnectivityRuleSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ConnectionType:
	//
	//	*ConnectivityRuleSpec_PublicRule
	//	*ConnectivityRuleSpec_PrivateRule
	ConnectionType isConnectivityRuleSpec_ConnectionType `protobuf_oneof:"connection_type"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ConnectivityRuleSpec) Reset() {
	*x = ConnectivityRuleSpec{}
	mi := &file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectivityRuleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectivityRuleSpec) ProtoMessage() {}

func (x *ConnectivityRuleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectivityRuleSpec.ProtoReflect.Descriptor instead.
func (*ConnectivityRuleSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectivityRuleSpec) GetConnectionType() isConnectivityRuleSpec_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return nil
}

func (x *ConnectivityRuleSpec) GetPublicRule() *PublicConnectivityRule {
	if x != nil {
		if x, ok := x.ConnectionType.(*ConnectivityRuleSpec_PublicRule); ok {
			return x.PublicRule
		}
	}
	return nil
}

func (x *ConnectivityRuleSpec) GetPrivateRule() *PrivateConnectivityRule {
	if x != nil {
		if x, ok := x.ConnectionType.(*ConnectivityRuleSpec_PrivateRule); ok {
			return x.PrivateRule
		}
	}
	return nil
}

type isConnectivityRuleSpec_ConnectionType interface {
	isConnectivityRuleSpec_ConnectionType()
}

type ConnectivityRuleSpec_PublicRule struct {
	// This allows access via public internet.
	PublicRule *PublicConnectivityRule `protobuf:"bytes,1,opt,name=public_rule,json=publicRule,proto3,oneof"`
}

type ConnectivityRuleSpec_PrivateRule struct {
	// This allows access via specific private vpc.
	PrivateRule *PrivateConnectivityRule `protobuf:"bytes,2,opt,name=private_rule,json=privateRule,proto3,oneof"`
}

func (*ConnectivityRuleSpec_PublicRule) isConnectivityRuleSpec_ConnectionType() {}

func (*ConnectivityRuleSpec_PrivateRule) isConnectivityRuleSpec_ConnectionType() {}

// A public connectivity rule allows access to the namespace via the public internet.
type PublicConnectivityRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicConnectivityRule) Reset() {
	*x = PublicConnectivityRule{}
	mi := &file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicConnectivityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicConnectivityRule) ProtoMessage() {}

func (x *PublicConnectivityRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicConnectivityRule.ProtoReflect.Descriptor instead.
func (*PublicConnectivityRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescGZIP(), []int{2}
}

// A private connectivity rule allows connections from a specific private vpc only.
type PrivateConnectivityRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Connection id provided to enforce the private connectivity. This is required both by AWS and GCP.
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// For GCP private connectivity service, GCP needs both GCP project id and the Private Service Connect Connection IDs
	// AWS only needs the connection_id
	GcpProjectId string `protobuf:"bytes,2,opt,name=gcp_project_id,json=gcpProjectId,proto3" json:"gcp_project_id,omitempty"`
	// The region of the connectivity rule. This should align with the namespace.
	// Example: "aws-us-west-2"
	Region        string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateConnectivityRule) Reset() {
	*x = PrivateConnectivityRule{}
	mi := &file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateConnectivityRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateConnectivityRule) ProtoMessage() {}

func (x *PrivateConnectivityRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateConnectivityRule.ProtoReflect.Descriptor instead.
func (*PrivateConnectivityRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *PrivateConnectivityRule) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *PrivateConnectivityRule) GetGcpProjectId() string {
	if x != nil {
		return x.GcpProjectId
	}
	return ""
}

func (x *PrivateConnectivityRule) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_temporal_api_cloud_connectivityrule_v1_message_proto protoreflect.FileDescriptor

var file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDesc = string([]byte{
	0x0a, 0x34, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x2c,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x02,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x50, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xf2, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x61, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x18, 0x0a, 0x16,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x63, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x67, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x42, 0xd4, 0x01, 0x0a, 0x29,
	0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x6f, 0x2e, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0xaa, 0x02, 0x28, 0x54, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x69, 0x6f, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65,
	0x2e, 0x56, 0x31, 0xea, 0x02, 0x2c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f,
	0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescData []byte
)

func file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDesc), len(file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDesc)))
	})
	return file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDescData
}

var file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_temporal_api_cloud_connectivityrule_v1_message_proto_goTypes = []any{
	(*ConnectivityRule)(nil),        // 0: temporal.api.cloud.connectivityrule.v1.ConnectivityRule
	(*ConnectivityRuleSpec)(nil),    // 1: temporal.api.cloud.connectivityrule.v1.ConnectivityRuleSpec
	(*PublicConnectivityRule)(nil),  // 2: temporal.api.cloud.connectivityrule.v1.PublicConnectivityRule
	(*PrivateConnectivityRule)(nil), // 3: temporal.api.cloud.connectivityrule.v1.PrivateConnectivityRule
	(v1.ResourceState)(0),           // 4: temporal.api.cloud.resource.v1.ResourceState
	(*timestamppb.Timestamp)(nil),   // 5: google.protobuf.Timestamp
}
var file_temporal_api_cloud_connectivityrule_v1_message_proto_depIdxs = []int32{
	1, // 0: temporal.api.cloud.connectivityrule.v1.ConnectivityRule.spec:type_name -> temporal.api.cloud.connectivityrule.v1.ConnectivityRuleSpec
	4, // 1: temporal.api.cloud.connectivityrule.v1.ConnectivityRule.state:type_name -> temporal.api.cloud.resource.v1.ResourceState
	5, // 2: temporal.api.cloud.connectivityrule.v1.ConnectivityRule.created_time:type_name -> google.protobuf.Timestamp
	2, // 3: temporal.api.cloud.connectivityrule.v1.ConnectivityRuleSpec.public_rule:type_name -> temporal.api.cloud.connectivityrule.v1.PublicConnectivityRule
	3, // 4: temporal.api.cloud.connectivityrule.v1.ConnectivityRuleSpec.private_rule:type_name -> temporal.api.cloud.connectivityrule.v1.PrivateConnectivityRule
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_temporal_api_cloud_connectivityrule_v1_message_proto_init() }
func file_temporal_api_cloud_connectivityrule_v1_message_proto_init() {
	if File_temporal_api_cloud_connectivityrule_v1_message_proto != nil {
		return
	}
	file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes[1].OneofWrappers = []any{
		(*ConnectivityRuleSpec_PublicRule)(nil),
		(*ConnectivityRuleSpec_PrivateRule)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDesc), len(file_temporal_api_cloud_connectivityrule_v1_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_cloud_connectivityrule_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_cloud_connectivityrule_v1_message_proto_depIdxs,
		MessageInfos:      file_temporal_api_cloud_connectivityrule_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_cloud_connectivityrule_v1_message_proto = out.File
	file_temporal_api_cloud_connectivityrule_v1_message_proto_goTypes = nil
	file_temporal_api_cloud_connectivityrule_v1_message_proto_depIdxs = nil
}
