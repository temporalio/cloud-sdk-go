// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: temporal/api/cloud/namespace/v1/message.proto

package namespace

import (
	v11 "go.temporal.io/cloud-sdk/api/connectivityrule/v1"
	v1 "go.temporal.io/cloud-sdk/api/resource/v1"
	v12 "go.temporal.io/cloud-sdk/api/sink/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// temporal:dev
type Capacity_Request_State int32

const (
	Capacity_Request_STATE_CAPACITY_REQUEST_UNSPECIFIED Capacity_Request_State = 0
	Capacity_Request_STATE_CAPACITY_REQUEST_COMPLETED   Capacity_Request_State = 1
	Capacity_Request_STATE_CAPACITY_REQUEST_IN_PROGRESS Capacity_Request_State = 2
	Capacity_Request_STATE_CAPACITY_REQUEST_FAILED      Capacity_Request_State = 3
)

// Enum value maps for Capacity_Request_State.
var (
	Capacity_Request_State_name = map[int32]string{
		0: "STATE_CAPACITY_REQUEST_UNSPECIFIED",
		1: "STATE_CAPACITY_REQUEST_COMPLETED",
		2: "STATE_CAPACITY_REQUEST_IN_PROGRESS",
		3: "STATE_CAPACITY_REQUEST_FAILED",
	}
	Capacity_Request_State_value = map[string]int32{
		"STATE_CAPACITY_REQUEST_UNSPECIFIED": 0,
		"STATE_CAPACITY_REQUEST_COMPLETED":   1,
		"STATE_CAPACITY_REQUEST_IN_PROGRESS": 2,
		"STATE_CAPACITY_REQUEST_FAILED":      3,
	}
)

func (x Capacity_Request_State) Enum() *Capacity_Request_State {
	p := new(Capacity_Request_State)
	*p = x
	return p
}

func (x Capacity_Request_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Capacity_Request_State) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[0].Descriptor()
}

func (Capacity_Request_State) Type() protoreflect.EnumType {
	return &file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[0]
}

func (x Capacity_Request_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Capacity_Request_State.Descriptor instead.
func (Capacity_Request_State) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{7, 2, 0}
}

type NamespaceSpec_SearchAttributeType int32

const (
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED  NamespaceSpec_SearchAttributeType = 0
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_TEXT         NamespaceSpec_SearchAttributeType = 1
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_KEYWORD      NamespaceSpec_SearchAttributeType = 2
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_INT          NamespaceSpec_SearchAttributeType = 3
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_DOUBLE       NamespaceSpec_SearchAttributeType = 4
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_BOOL         NamespaceSpec_SearchAttributeType = 5
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_DATETIME     NamespaceSpec_SearchAttributeType = 6
	NamespaceSpec_SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST NamespaceSpec_SearchAttributeType = 7
)

// Enum value maps for NamespaceSpec_SearchAttributeType.
var (
	NamespaceSpec_SearchAttributeType_name = map[int32]string{
		0: "SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED",
		1: "SEARCH_ATTRIBUTE_TYPE_TEXT",
		2: "SEARCH_ATTRIBUTE_TYPE_KEYWORD",
		3: "SEARCH_ATTRIBUTE_TYPE_INT",
		4: "SEARCH_ATTRIBUTE_TYPE_DOUBLE",
		5: "SEARCH_ATTRIBUTE_TYPE_BOOL",
		6: "SEARCH_ATTRIBUTE_TYPE_DATETIME",
		7: "SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST",
	}
	NamespaceSpec_SearchAttributeType_value = map[string]int32{
		"SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED":  0,
		"SEARCH_ATTRIBUTE_TYPE_TEXT":         1,
		"SEARCH_ATTRIBUTE_TYPE_KEYWORD":      2,
		"SEARCH_ATTRIBUTE_TYPE_INT":          3,
		"SEARCH_ATTRIBUTE_TYPE_DOUBLE":       4,
		"SEARCH_ATTRIBUTE_TYPE_BOOL":         5,
		"SEARCH_ATTRIBUTE_TYPE_DATETIME":     6,
		"SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST": 7,
	}
)

func (x NamespaceSpec_SearchAttributeType) Enum() *NamespaceSpec_SearchAttributeType {
	p := new(NamespaceSpec_SearchAttributeType)
	*p = x
	return p
}

func (x NamespaceSpec_SearchAttributeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamespaceSpec_SearchAttributeType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[1].Descriptor()
}

func (NamespaceSpec_SearchAttributeType) Type() protoreflect.EnumType {
	return &file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[1]
}

func (x NamespaceSpec_SearchAttributeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamespaceSpec_SearchAttributeType.Descriptor instead.
func (NamespaceSpec_SearchAttributeType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{8, 0}
}

type NamespaceRegionStatus_State int32

const (
	NamespaceRegionStatus_STATE_UNSPECIFIED NamespaceRegionStatus_State = 0
	NamespaceRegionStatus_STATE_ADDING      NamespaceRegionStatus_State = 1 // The region is being added to the namespace.
	NamespaceRegionStatus_STATE_ACTIVE      NamespaceRegionStatus_State = 2 // The namespace is active in this region.
	NamespaceRegionStatus_STATE_PASSIVE     NamespaceRegionStatus_State = 3 // The namespace is passive in this region.
	NamespaceRegionStatus_STATE_REMOVING    NamespaceRegionStatus_State = 4 // The region is being removed from the namespace.
	NamespaceRegionStatus_STATE_FAILED      NamespaceRegionStatus_State = 5 // The region failed to be added/removed, check failure_reason in the last async_operation status for more details.
)

// Enum value maps for NamespaceRegionStatus_State.
var (
	NamespaceRegionStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_ADDING",
		2: "STATE_ACTIVE",
		3: "STATE_PASSIVE",
		4: "STATE_REMOVING",
		5: "STATE_FAILED",
	}
	NamespaceRegionStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_ADDING":      1,
		"STATE_ACTIVE":      2,
		"STATE_PASSIVE":     3,
		"STATE_REMOVING":    4,
		"STATE_FAILED":      5,
	}
)

func (x NamespaceRegionStatus_State) Enum() *NamespaceRegionStatus_State {
	p := new(NamespaceRegionStatus_State)
	*p = x
	return p
}

func (x NamespaceRegionStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamespaceRegionStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[2].Descriptor()
}

func (NamespaceRegionStatus_State) Type() protoreflect.EnumType {
	return &file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[2]
}

func (x NamespaceRegionStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamespaceRegionStatus_State.Descriptor instead.
func (NamespaceRegionStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{14, 0}
}

type ExportSink_Health int32

const (
	ExportSink_HEALTH_UNSPECIFIED              ExportSink_Health = 0
	ExportSink_HEALTH_OK                       ExportSink_Health = 1
	ExportSink_HEALTH_ERROR_INTERNAL           ExportSink_Health = 2
	ExportSink_HEALTH_ERROR_USER_CONFIGURATION ExportSink_Health = 3
)

// Enum value maps for ExportSink_Health.
var (
	ExportSink_Health_name = map[int32]string{
		0: "HEALTH_UNSPECIFIED",
		1: "HEALTH_OK",
		2: "HEALTH_ERROR_INTERNAL",
		3: "HEALTH_ERROR_USER_CONFIGURATION",
	}
	ExportSink_Health_value = map[string]int32{
		"HEALTH_UNSPECIFIED":              0,
		"HEALTH_OK":                       1,
		"HEALTH_ERROR_INTERNAL":           2,
		"HEALTH_ERROR_USER_CONFIGURATION": 3,
	}
)

func (x ExportSink_Health) Enum() *ExportSink_Health {
	p := new(ExportSink_Health)
	*p = x
	return p
}

func (x ExportSink_Health) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportSink_Health) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[3].Descriptor()
}

func (ExportSink_Health) Type() protoreflect.EnumType {
	return &file_temporal_api_cloud_namespace_v1_message_proto_enumTypes[3]
}

func (x ExportSink_Health) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportSink_Health.Descriptor instead.
func (ExportSink_Health) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{16, 0}
}

type CertificateFilterSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The common_name in the certificate.
	// Optional, default is empty.
	CommonName string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// The organization in the certificate.
	// Optional, default is empty.
	Organization string `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	// The organizational_unit in the certificate.
	// Optional, default is empty.
	OrganizationalUnit string `protobuf:"bytes,3,opt,name=organizational_unit,json=organizationalUnit,proto3" json:"organizational_unit,omitempty"`
	// The subject_alternative_name in the certificate.
	// Optional, default is empty.
	SubjectAlternativeName string `protobuf:"bytes,4,opt,name=subject_alternative_name,json=subjectAlternativeName,proto3" json:"subject_alternative_name,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CertificateFilterSpec) Reset() {
	*x = CertificateFilterSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateFilterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateFilterSpec) ProtoMessage() {}

func (x *CertificateFilterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateFilterSpec.ProtoReflect.Descriptor instead.
func (*CertificateFilterSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *CertificateFilterSpec) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *CertificateFilterSpec) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *CertificateFilterSpec) GetOrganizationalUnit() string {
	if x != nil {
		return x.OrganizationalUnit
	}
	return ""
}

func (x *CertificateFilterSpec) GetSubjectAlternativeName() string {
	if x != nil {
		return x.SubjectAlternativeName
	}
	return ""
}

type MtlsAuthSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The base64 encoded ca cert(s) in PEM format that the clients can use for authentication and authorization.
	// This must only be one value, but the CA can have a chain.
	//
	// (-- api-linter: core::0140::base64=disabled --)
	// Deprecated: Use accepted_client_ca instead. Will be ignored when accepted_client_ca is set.
	// temporal:versioning:max_version=v0.2.0
	AcceptedClientCaDeprecated string `protobuf:"bytes,1,opt,name=accepted_client_ca_deprecated,json=acceptedClientCaDeprecated,proto3" json:"accepted_client_ca_deprecated,omitempty"`
	// The ca cert(s) in PEM format that the clients can use for authentication and authorization.
	// This must only be one value, but the CA can have a chain.
	// temporal:versioning:min_version=v0.2.0
	// temporal:codegen:ignore
	AcceptedClientCa []byte `protobuf:"bytes,4,opt,name=accepted_client_ca,json=acceptedClientCa,proto3" json:"accepted_client_ca,omitempty"`
	// Certificate filters which, if specified, only allow connections from client certificates whose distinguished name properties match at least one of the filters.
	// This allows limiting access to specific end-entity certificates.
	// Optional, default is empty.
	CertificateFilters []*CertificateFilterSpec `protobuf:"bytes,2,rep,name=certificate_filters,json=certificateFilters,proto3" json:"certificate_filters,omitempty"`
	// Flag to enable mTLS auth (default: disabled).
	// Note: disabling mTLS auth will cause existing mTLS connections to fail.
	// temporal:versioning:min_version=v0.2.0
	Enabled       bool `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MtlsAuthSpec) Reset() {
	*x = MtlsAuthSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MtlsAuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MtlsAuthSpec) ProtoMessage() {}

func (x *MtlsAuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MtlsAuthSpec.ProtoReflect.Descriptor instead.
func (*MtlsAuthSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *MtlsAuthSpec) GetAcceptedClientCaDeprecated() string {
	if x != nil {
		return x.AcceptedClientCaDeprecated
	}
	return ""
}

func (x *MtlsAuthSpec) GetAcceptedClientCa() []byte {
	if x != nil {
		return x.AcceptedClientCa
	}
	return nil
}

func (x *MtlsAuthSpec) GetCertificateFilters() []*CertificateFilterSpec {
	if x != nil {
		return x.CertificateFilters
	}
	return nil
}

func (x *MtlsAuthSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ApiKeyAuthSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flag to enable API key auth (default: disabled).
	// Note: disabling API key auth will cause existing API key connections to fail.
	Enabled       bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApiKeyAuthSpec) Reset() {
	*x = ApiKeyAuthSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApiKeyAuthSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyAuthSpec) ProtoMessage() {}

func (x *ApiKeyAuthSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyAuthSpec.ProtoReflect.Descriptor instead.
func (*ApiKeyAuthSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *ApiKeyAuthSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type LifecycleSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flag to enable delete protection for the namespace.
	EnableDeleteProtection bool `protobuf:"varint,1,opt,name=enable_delete_protection,json=enableDeleteProtection,proto3" json:"enable_delete_protection,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *LifecycleSpec) Reset() {
	*x = LifecycleSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleSpec) ProtoMessage() {}

func (x *LifecycleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleSpec.ProtoReflect.Descriptor instead.
func (*LifecycleSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *LifecycleSpec) GetEnableDeleteProtection() bool {
	if x != nil {
		return x.EnableDeleteProtection
	}
	return false
}

type CodecServerSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The codec server endpoint.
	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	// Whether to pass the user access token with your endpoint.
	PassAccessToken bool `protobuf:"varint,2,opt,name=pass_access_token,json=passAccessToken,proto3" json:"pass_access_token,omitempty"`
	// Whether to include cross-origin credentials.
	IncludeCrossOriginCredentials bool `protobuf:"varint,3,opt,name=include_cross_origin_credentials,json=includeCrossOriginCredentials,proto3" json:"include_cross_origin_credentials,omitempty"`
	// A custom error message to display for remote codec server errors.
	// temporal:versioning:min_version=v0.5.1
	CustomErrorMessage *CodecServerSpec_CustomErrorMessage `protobuf:"bytes,4,opt,name=custom_error_message,json=customErrorMessage,proto3" json:"custom_error_message,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CodecServerSpec) Reset() {
	*x = CodecServerSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecServerSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecServerSpec) ProtoMessage() {}

func (x *CodecServerSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecServerSpec.ProtoReflect.Descriptor instead.
func (*CodecServerSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *CodecServerSpec) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CodecServerSpec) GetPassAccessToken() bool {
	if x != nil {
		return x.PassAccessToken
	}
	return false
}

func (x *CodecServerSpec) GetIncludeCrossOriginCredentials() bool {
	if x != nil {
		return x.IncludeCrossOriginCredentials
	}
	return false
}

func (x *CodecServerSpec) GetCustomErrorMessage() *CodecServerSpec_CustomErrorMessage {
	if x != nil {
		return x.CustomErrorMessage
	}
	return nil
}

type HighAvailabilitySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Flag to disable managed failover for the namespace.
	DisableManagedFailover bool `protobuf:"varint,1,opt,name=disable_managed_failover,json=disableManagedFailover,proto3" json:"disable_managed_failover,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *HighAvailabilitySpec) Reset() {
	*x = HighAvailabilitySpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HighAvailabilitySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighAvailabilitySpec) ProtoMessage() {}

func (x *HighAvailabilitySpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighAvailabilitySpec.ProtoReflect.Descriptor instead.
func (*HighAvailabilitySpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *HighAvailabilitySpec) GetDisableManagedFailover() bool {
	if x != nil {
		return x.DisableManagedFailover
	}
	return false
}

// temporal:dev
type CapacitySpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Spec:
	//
	//	*CapacitySpec_OnDemand_
	//	*CapacitySpec_Provisioned_
	Spec          isCapacitySpec_Spec `protobuf_oneof:"spec"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapacitySpec) Reset() {
	*x = CapacitySpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapacitySpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacitySpec) ProtoMessage() {}

func (x *CapacitySpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacitySpec.ProtoReflect.Descriptor instead.
func (*CapacitySpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *CapacitySpec) GetSpec() isCapacitySpec_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CapacitySpec) GetOnDemand() *CapacitySpec_OnDemand {
	if x != nil {
		if x, ok := x.Spec.(*CapacitySpec_OnDemand_); ok {
			return x.OnDemand
		}
	}
	return nil
}

func (x *CapacitySpec) GetProvisioned() *CapacitySpec_Provisioned {
	if x != nil {
		if x, ok := x.Spec.(*CapacitySpec_Provisioned_); ok {
			return x.Provisioned
		}
	}
	return nil
}

type isCapacitySpec_Spec interface {
	isCapacitySpec_Spec()
}

type CapacitySpec_OnDemand_ struct {
	// on-demand capacity (dynamic-envelope)
	OnDemand *CapacitySpec_OnDemand `protobuf:"bytes,1,opt,name=on_demand,json=onDemand,proto3,oneof"`
}

type CapacitySpec_Provisioned_ struct {
	// provisioned capacity
	Provisioned *CapacitySpec_Provisioned `protobuf:"bytes,2,opt,name=provisioned,proto3,oneof"`
}

func (*CapacitySpec_OnDemand_) isCapacitySpec_Spec() {}

func (*CapacitySpec_Provisioned_) isCapacitySpec_Spec() {}

// temporal:dev
type Capacity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// temporal:dev
	//
	// Types that are valid to be assigned to CurrentMode:
	//
	//	*Capacity_OnDemand_
	//	*Capacity_Provisioned_
	CurrentMode isCapacity_CurrentMode `protobuf_oneof:"current_mode"`
	// temporal:dev
	// The latest capacity request, if any.
	LatestRequest *Capacity_Request `protobuf:"bytes,3,opt,name=latest_request,json=latestRequest,proto3" json:"latest_request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capacity) Reset() {
	*x = Capacity{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capacity) ProtoMessage() {}

func (x *Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capacity.ProtoReflect.Descriptor instead.
func (*Capacity) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *Capacity) GetCurrentMode() isCapacity_CurrentMode {
	if x != nil {
		return x.CurrentMode
	}
	return nil
}

func (x *Capacity) GetOnDemand() *Capacity_OnDemand {
	if x != nil {
		if x, ok := x.CurrentMode.(*Capacity_OnDemand_); ok {
			return x.OnDemand
		}
	}
	return nil
}

func (x *Capacity) GetProvisioned() *Capacity_Provisioned {
	if x != nil {
		if x, ok := x.CurrentMode.(*Capacity_Provisioned_); ok {
			return x.Provisioned
		}
	}
	return nil
}

func (x *Capacity) GetLatestRequest() *Capacity_Request {
	if x != nil {
		return x.LatestRequest
	}
	return nil
}

type isCapacity_CurrentMode interface {
	isCapacity_CurrentMode()
}

type Capacity_OnDemand_ struct {
	// the current capacity is on-demand
	OnDemand *Capacity_OnDemand `protobuf:"bytes,1,opt,name=on_demand,json=onDemand,proto3,oneof"`
}

type Capacity_Provisioned_ struct {
	// the current capacity is provisioned
	Provisioned *Capacity_Provisioned `protobuf:"bytes,2,opt,name=provisioned,proto3,oneof"`
}

func (*Capacity_OnDemand_) isCapacity_CurrentMode() {}

func (*Capacity_Provisioned_) isCapacity_CurrentMode() {}

type NamespaceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name to use for the namespace.
	// This will create a namespace that's available at '<name>.<account>.tmprl.cloud:7233'.
	// The name is immutable. Once set, it cannot be changed.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The ids of the regions where the namespace should be available.
	// The GetRegions API can be used to get the list of valid region ids.
	// Specifying more than one region makes the namespace "global", which is currently a preview only feature with restricted access.
	// Please reach out to Temporal support for more information on global namespaces.
	// When provisioned the global namespace will be active on the first region in the list and passive on the rest.
	// Number of supported regions is 2.
	// The regions is immutable. Once set, it cannot be changed.
	// Example: ["aws-us-west-2"].
	Regions []string `protobuf:"bytes,2,rep,name=regions,proto3" json:"regions,omitempty"`
	// The number of days the workflows data will be retained for.
	// Changes to the retention period may impact your storage costs.
	// Any changes to the retention period will be applied to all new running workflows.
	RetentionDays int32 `protobuf:"varint,3,opt,name=retention_days,json=retentionDays,proto3" json:"retention_days,omitempty"`
	// The mTLS auth configuration for the namespace.
	// If unspecified, mTLS will be disabled.
	MtlsAuth *MtlsAuthSpec `protobuf:"bytes,4,opt,name=mtls_auth,json=mtlsAuth,proto3" json:"mtls_auth,omitempty"`
	// The API key auth configuration for the namespace.
	// If unspecified, API keys will be disabled.
	// temporal:versioning:min_version=v0.2.0
	ApiKeyAuth *ApiKeyAuthSpec `protobuf:"bytes,7,opt,name=api_key_auth,json=apiKeyAuth,proto3" json:"api_key_auth,omitempty"`
	// The custom search attributes to use for the namespace.
	// The name of the attribute is the key and the type is the value.
	// Supported attribute types: text, keyword, int, double, bool, datetime, keyword_list.
	// NOTE: currently deleting a search attribute is not supported.
	// Optional, default is empty.
	// Deprecated: Use search_attributes instead.
	// temporal:versioning:max_version=v0.3.0
	//
	// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
	CustomSearchAttributes map[string]string `protobuf:"bytes,5,rep,name=custom_search_attributes,json=customSearchAttributes,proto3" json:"custom_search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The custom search attributes to use for the namespace.
	// The name of the attribute is the key and the type is the value.
	// Note: currently deleting a search attribute is not supported.
	// Optional, default is empty.
	// temporal:versioning:min_version=v0.3.0
	// temporal:enums:replaces=custom_search_attributes
	SearchAttributes map[string]NamespaceSpec_SearchAttributeType `protobuf:"bytes,8,rep,name=search_attributes,json=searchAttributes,proto3" json:"search_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=temporal.api.cloud.namespace.v1.NamespaceSpec_SearchAttributeType"`
	// Codec server spec used by UI to decode payloads for all users interacting with this namespace.
	// Optional, default is unset.
	CodecServer *CodecServerSpec `protobuf:"bytes,6,opt,name=codec_server,json=codecServer,proto3" json:"codec_server,omitempty"`
	// The lifecycle configuration for the namespace.
	// temporal:versioning:min_version=v0.4.0
	Lifecycle *LifecycleSpec `protobuf:"bytes,9,opt,name=lifecycle,proto3" json:"lifecycle,omitempty"`
	// The high availability configuration for the namespace.
	// temporal:versioning:min_version=v0.4.0
	HighAvailability *HighAvailabilitySpec `protobuf:"bytes,10,opt,name=high_availability,json=highAvailability,proto3" json:"high_availability,omitempty"`
	// The existing connectivity rule ids for the namespace.
	// temporal:versioning:min_version=v0.6.0
	ConnectivityRuleIds []string `protobuf:"bytes,11,rep,name=connectivity_rule_ids,json=connectivityRuleIds,proto3" json:"connectivity_rule_ids,omitempty"`
	// The capacity configuration for the namespace.
	// temporal:versioning:min_version=development
	// temporal:dev
	CapacitySpec  *CapacitySpec `protobuf:"bytes,12,opt,name=capacity_spec,json=capacitySpec,proto3" json:"capacity_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceSpec) Reset() {
	*x = NamespaceSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceSpec) ProtoMessage() {}

func (x *NamespaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceSpec.ProtoReflect.Descriptor instead.
func (*NamespaceSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *NamespaceSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamespaceSpec) GetRegions() []string {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *NamespaceSpec) GetRetentionDays() int32 {
	if x != nil {
		return x.RetentionDays
	}
	return 0
}

func (x *NamespaceSpec) GetMtlsAuth() *MtlsAuthSpec {
	if x != nil {
		return x.MtlsAuth
	}
	return nil
}

func (x *NamespaceSpec) GetApiKeyAuth() *ApiKeyAuthSpec {
	if x != nil {
		return x.ApiKeyAuth
	}
	return nil
}

// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
func (x *NamespaceSpec) GetCustomSearchAttributes() map[string]string {
	if x != nil {
		return x.CustomSearchAttributes
	}
	return nil
}

func (x *NamespaceSpec) GetSearchAttributes() map[string]NamespaceSpec_SearchAttributeType {
	if x != nil {
		return x.SearchAttributes
	}
	return nil
}

func (x *NamespaceSpec) GetCodecServer() *CodecServerSpec {
	if x != nil {
		return x.CodecServer
	}
	return nil
}

func (x *NamespaceSpec) GetLifecycle() *LifecycleSpec {
	if x != nil {
		return x.Lifecycle
	}
	return nil
}

func (x *NamespaceSpec) GetHighAvailability() *HighAvailabilitySpec {
	if x != nil {
		return x.HighAvailability
	}
	return nil
}

func (x *NamespaceSpec) GetConnectivityRuleIds() []string {
	if x != nil {
		return x.ConnectivityRuleIds
	}
	return nil
}

func (x *NamespaceSpec) GetCapacitySpec() *CapacitySpec {
	if x != nil {
		return x.CapacitySpec
	}
	return nil
}

type Endpoints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The web UI address.
	WebAddress string `protobuf:"bytes,1,opt,name=web_address,json=webAddress,proto3" json:"web_address,omitempty"`
	// The gRPC address for mTLS client connections (may be empty if mTLS is disabled).
	MtlsGrpcAddress string `protobuf:"bytes,2,opt,name=mtls_grpc_address,json=mtlsGrpcAddress,proto3" json:"mtls_grpc_address,omitempty"`
	// The gRPC address for API key client connections (may be empty if API keys are disabled).
	GrpcAddress   string `protobuf:"bytes,3,opt,name=grpc_address,json=grpcAddress,proto3" json:"grpc_address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Endpoints) Reset() {
	*x = Endpoints{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Endpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoints) ProtoMessage() {}

func (x *Endpoints) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoints.ProtoReflect.Descriptor instead.
func (*Endpoints) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *Endpoints) GetWebAddress() string {
	if x != nil {
		return x.WebAddress
	}
	return ""
}

func (x *Endpoints) GetMtlsGrpcAddress() string {
	if x != nil {
		return x.MtlsGrpcAddress
	}
	return ""
}

func (x *Endpoints) GetGrpcAddress() string {
	if x != nil {
		return x.GrpcAddress
	}
	return ""
}

type Limits struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The number of actions per second (APS) that is currently allowed for the namespace.
	// The namespace may be throttled if its APS exceeds the limit.
	ActionsPerSecondLimit int32 `protobuf:"varint,1,opt,name=actions_per_second_limit,json=actionsPerSecondLimit,proto3" json:"actions_per_second_limit,omitempty"`
	// The number of requests per second (RPS) that is currently allowed for the namespace.
	// temporal:dev
	RequestsPerSecondLimit int32 `protobuf:"varint,2,opt,name=requests_per_second_limit,json=requestsPerSecondLimit,proto3" json:"requests_per_second_limit,omitempty"`
	// The number of concurrent task pollers allowed for the namespace.
	// temporal:dev
	ConcurrentTaskPollerLimit int32 `protobuf:"varint,3,opt,name=concurrent_task_poller_limit,json=concurrentTaskPollerLimit,proto3" json:"concurrent_task_poller_limit,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *Limits) Reset() {
	*x = Limits{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limits) ProtoMessage() {}

func (x *Limits) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limits.ProtoReflect.Descriptor instead.
func (*Limits) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *Limits) GetActionsPerSecondLimit() int32 {
	if x != nil {
		return x.ActionsPerSecondLimit
	}
	return 0
}

func (x *Limits) GetRequestsPerSecondLimit() int32 {
	if x != nil {
		return x.RequestsPerSecondLimit
	}
	return 0
}

func (x *Limits) GetConcurrentTaskPollerLimit() int32 {
	if x != nil {
		return x.ConcurrentTaskPollerLimit
	}
	return 0
}

type AWSPrivateLinkInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of principal arns that are allowed to access the namespace on the private link.
	AllowedPrincipalArns []string `protobuf:"bytes,1,rep,name=allowed_principal_arns,json=allowedPrincipalArns,proto3" json:"allowed_principal_arns,omitempty"`
	// The list of vpc endpoint service names that are associated with the namespace.
	VpcEndpointServiceNames []string `protobuf:"bytes,2,rep,name=vpc_endpoint_service_names,json=vpcEndpointServiceNames,proto3" json:"vpc_endpoint_service_names,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AWSPrivateLinkInfo) Reset() {
	*x = AWSPrivateLinkInfo{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AWSPrivateLinkInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSPrivateLinkInfo) ProtoMessage() {}

func (x *AWSPrivateLinkInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSPrivateLinkInfo.ProtoReflect.Descriptor instead.
func (*AWSPrivateLinkInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{11}
}

func (x *AWSPrivateLinkInfo) GetAllowedPrincipalArns() []string {
	if x != nil {
		return x.AllowedPrincipalArns
	}
	return nil
}

func (x *AWSPrivateLinkInfo) GetVpcEndpointServiceNames() []string {
	if x != nil {
		return x.VpcEndpointServiceNames
	}
	return nil
}

type PrivateConnectivity struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the region where the private connectivity applies.
	Region string `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	// The AWS PrivateLink info.
	// This will only be set for an aws region.
	AwsPrivateLink *AWSPrivateLinkInfo `protobuf:"bytes,2,opt,name=aws_private_link,json=awsPrivateLink,proto3" json:"aws_private_link,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PrivateConnectivity) Reset() {
	*x = PrivateConnectivity{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateConnectivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateConnectivity) ProtoMessage() {}

func (x *PrivateConnectivity) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateConnectivity.ProtoReflect.Descriptor instead.
func (*PrivateConnectivity) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{12}
}

func (x *PrivateConnectivity) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PrivateConnectivity) GetAwsPrivateLink() *AWSPrivateLinkInfo {
	if x != nil {
		return x.AwsPrivateLink
	}
	return nil
}

type Namespace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The namespace identifier.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The current version of the namespace specification.
	// The next update operation will have to include this version.
	ResourceVersion string `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// The namespace specification.
	Spec *NamespaceSpec `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	// The current state of the namespace.
	// Deprecated: Use state instead.
	// temporal:versioning:max_version=v0.3.0
	//
	// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
	StateDeprecated string `protobuf:"bytes,4,opt,name=state_deprecated,json=stateDeprecated,proto3" json:"state_deprecated,omitempty"`
	// The current state of the namespace.
	// For any failed state, reach out to Temporal Cloud support for remediation.
	// temporal:versioning:min_version=v0.3.0
	// temporal:enums:replaces=state_deprecated
	State v1.ResourceState `protobuf:"varint,13,opt,name=state,proto3,enum=temporal.api.cloud.resource.v1.ResourceState" json:"state,omitempty"`
	// The id of the async operation that is creating/updating/deleting the namespace, if any.
	AsyncOperationId string `protobuf:"bytes,5,opt,name=async_operation_id,json=asyncOperationId,proto3" json:"async_operation_id,omitempty"`
	// The endpoints for the namespace.
	Endpoints *Endpoints `protobuf:"bytes,6,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
	// The currently active region for the namespace.
	ActiveRegion string `protobuf:"bytes,7,opt,name=active_region,json=activeRegion,proto3" json:"active_region,omitempty"`
	// The limits set on the namespace currently.
	Limits *Limits `protobuf:"bytes,8,opt,name=limits,proto3" json:"limits,omitempty"`
	// The private connectivities for the namespace, if any.
	PrivateConnectivities []*PrivateConnectivity `protobuf:"bytes,9,rep,name=private_connectivities,json=privateConnectivities,proto3" json:"private_connectivities,omitempty"`
	// The date and time when the namespace was created.
	CreatedTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// The date and time when the namespace was last modified.
	// Will not be set if the namespace has never been modified.
	LastModifiedTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_modified_time,json=lastModifiedTime,proto3" json:"last_modified_time,omitempty"`
	// The status of each region where the namespace is available.
	// The id of the region is the key and the status is the value of the map.
	RegionStatus map[string]*NamespaceRegionStatus `protobuf:"bytes,12,rep,name=region_status,json=regionStatus,proto3" json:"region_status,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// connectivity_rules that set on this namespace
	ConnectivityRules []*v11.ConnectivityRule `protobuf:"bytes,14,rep,name=connectivity_rules,json=connectivityRules,proto3" json:"connectivity_rules,omitempty"`
	// The tags for the namespace.
	Tags map[string]string `protobuf:"bytes,15,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The capacity of the namespace.
	// temporal:dev
	Capacity      *Capacity `protobuf:"bytes,16,opt,name=capacity,proto3" json:"capacity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{13}
}

func (x *Namespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Namespace) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *Namespace) GetSpec() *NamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
func (x *Namespace) GetStateDeprecated() string {
	if x != nil {
		return x.StateDeprecated
	}
	return ""
}

func (x *Namespace) GetState() v1.ResourceState {
	if x != nil {
		return x.State
	}
	return v1.ResourceState(0)
}

func (x *Namespace) GetAsyncOperationId() string {
	if x != nil {
		return x.AsyncOperationId
	}
	return ""
}

func (x *Namespace) GetEndpoints() *Endpoints {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Namespace) GetActiveRegion() string {
	if x != nil {
		return x.ActiveRegion
	}
	return ""
}

func (x *Namespace) GetLimits() *Limits {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *Namespace) GetPrivateConnectivities() []*PrivateConnectivity {
	if x != nil {
		return x.PrivateConnectivities
	}
	return nil
}

func (x *Namespace) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *Namespace) GetLastModifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModifiedTime
	}
	return nil
}

func (x *Namespace) GetRegionStatus() map[string]*NamespaceRegionStatus {
	if x != nil {
		return x.RegionStatus
	}
	return nil
}

func (x *Namespace) GetConnectivityRules() []*v11.ConnectivityRule {
	if x != nil {
		return x.ConnectivityRules
	}
	return nil
}

func (x *Namespace) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Namespace) GetCapacity() *Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

type NamespaceRegionStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current state of the namespace region.
	// Possible values: adding, active, passive, removing, failed.
	// For any failed state, reach out to Temporal Cloud support for remediation.
	// Deprecated: Use state instead.
	// temporal:versioning:max_version=v0.3.0
	//
	// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
	StateDeprecated string `protobuf:"bytes,1,opt,name=state_deprecated,json=stateDeprecated,proto3" json:"state_deprecated,omitempty"`
	// The current state of the namespace region.
	// temporal:versioning:min_version=v0.3.0
	// temporal:enums:replaces=state_deprecated
	State NamespaceRegionStatus_State `protobuf:"varint,3,opt,name=state,proto3,enum=temporal.api.cloud.namespace.v1.NamespaceRegionStatus_State" json:"state,omitempty"`
	// The id of the async operation that is making changes to where the namespace is available, if any.
	AsyncOperationId string `protobuf:"bytes,2,opt,name=async_operation_id,json=asyncOperationId,proto3" json:"async_operation_id,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *NamespaceRegionStatus) Reset() {
	*x = NamespaceRegionStatus{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceRegionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceRegionStatus) ProtoMessage() {}

func (x *NamespaceRegionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceRegionStatus.ProtoReflect.Descriptor instead.
func (*NamespaceRegionStatus) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{14}
}

// Deprecated: Marked as deprecated in temporal/api/cloud/namespace/v1/message.proto.
func (x *NamespaceRegionStatus) GetStateDeprecated() string {
	if x != nil {
		return x.StateDeprecated
	}
	return ""
}

func (x *NamespaceRegionStatus) GetState() NamespaceRegionStatus_State {
	if x != nil {
		return x.State
	}
	return NamespaceRegionStatus_STATE_UNSPECIFIED
}

func (x *NamespaceRegionStatus) GetAsyncOperationId() string {
	if x != nil {
		return x.AsyncOperationId
	}
	return ""
}

type ExportSinkSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique name of the export sink.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A flag indicating whether the export sink is enabled or not.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The S3 configuration details when destination_type is S3.
	S3 *v12.S3Spec `protobuf:"bytes,3,opt,name=s3,proto3" json:"s3,omitempty"`
	// This is a feature under development. We will allow GCS sink support for GCP Namespaces.
	// The GCS configuration details when destination_type is GCS.
	Gcs           *v12.GCSSpec `protobuf:"bytes,4,opt,name=gcs,proto3" json:"gcs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportSinkSpec) Reset() {
	*x = ExportSinkSpec{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportSinkSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSinkSpec) ProtoMessage() {}

func (x *ExportSinkSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSinkSpec.ProtoReflect.Descriptor instead.
func (*ExportSinkSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{15}
}

func (x *ExportSinkSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExportSinkSpec) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ExportSinkSpec) GetS3() *v12.S3Spec {
	if x != nil {
		return x.S3
	}
	return nil
}

func (x *ExportSinkSpec) GetGcs() *v12.GCSSpec {
	if x != nil {
		return x.Gcs
	}
	return nil
}

type ExportSink struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique name of the export sink, once set it can't be changed
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version of the export sink resource.
	ResourceVersion string `protobuf:"bytes,2,opt,name=resource_version,json=resourceVersion,proto3" json:"resource_version,omitempty"`
	// The current state of the export sink.
	State v1.ResourceState `protobuf:"varint,3,opt,name=state,proto3,enum=temporal.api.cloud.resource.v1.ResourceState" json:"state,omitempty"`
	// The specification details of the export sink.
	Spec *ExportSinkSpec `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty"`
	// The health status of the export sink.
	Health ExportSink_Health `protobuf:"varint,5,opt,name=health,proto3,enum=temporal.api.cloud.namespace.v1.ExportSink_Health" json:"health,omitempty"`
	// An error message describing any issues with the export sink, if applicable.
	ErrorMessage string `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The timestamp of the latest successful data export.
	LatestDataExportTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=latest_data_export_time,json=latestDataExportTime,proto3" json:"latest_data_export_time,omitempty"`
	// The timestamp of the last health check performed on the export sink.
	LastHealthCheckTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_health_check_time,json=lastHealthCheckTime,proto3" json:"last_health_check_time,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ExportSink) Reset() {
	*x = ExportSink{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportSink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportSink) ProtoMessage() {}

func (x *ExportSink) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportSink.ProtoReflect.Descriptor instead.
func (*ExportSink) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{16}
}

func (x *ExportSink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExportSink) GetResourceVersion() string {
	if x != nil {
		return x.ResourceVersion
	}
	return ""
}

func (x *ExportSink) GetState() v1.ResourceState {
	if x != nil {
		return x.State
	}
	return v1.ResourceState(0)
}

func (x *ExportSink) GetSpec() *ExportSinkSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ExportSink) GetHealth() ExportSink_Health {
	if x != nil {
		return x.Health
	}
	return ExportSink_HEALTH_UNSPECIFIED
}

func (x *ExportSink) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ExportSink) GetLatestDataExportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestDataExportTime
	}
	return nil
}

func (x *ExportSink) GetLastHealthCheckTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHealthCheckTime
	}
	return nil
}

type CodecServerSpec_CustomErrorMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The error message to display by default for any remote codec server errors.
	Default       *CodecServerSpec_CustomErrorMessage_ErrorMessage `protobuf:"bytes,1,opt,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecServerSpec_CustomErrorMessage) Reset() {
	*x = CodecServerSpec_CustomErrorMessage{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecServerSpec_CustomErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecServerSpec_CustomErrorMessage) ProtoMessage() {}

func (x *CodecServerSpec_CustomErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecServerSpec_CustomErrorMessage.ProtoReflect.Descriptor instead.
func (*CodecServerSpec_CustomErrorMessage) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CodecServerSpec_CustomErrorMessage) GetDefault() *CodecServerSpec_CustomErrorMessage_ErrorMessage {
	if x != nil {
		return x.Default
	}
	return nil
}

type CodecServerSpec_CustomErrorMessage_ErrorMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A message to display.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// A link that is displayed along side the configured message.
	Link          string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CodecServerSpec_CustomErrorMessage_ErrorMessage) Reset() {
	*x = CodecServerSpec_CustomErrorMessage_ErrorMessage{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CodecServerSpec_CustomErrorMessage_ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodecServerSpec_CustomErrorMessage_ErrorMessage) ProtoMessage() {}

func (x *CodecServerSpec_CustomErrorMessage_ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodecServerSpec_CustomErrorMessage_ErrorMessage.ProtoReflect.Descriptor instead.
func (*CodecServerSpec_CustomErrorMessage_ErrorMessage) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *CodecServerSpec_CustomErrorMessage_ErrorMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CodecServerSpec_CustomErrorMessage_ErrorMessage) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type CapacitySpec_OnDemand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapacitySpec_OnDemand) Reset() {
	*x = CapacitySpec_OnDemand{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapacitySpec_OnDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacitySpec_OnDemand) ProtoMessage() {}

func (x *CapacitySpec_OnDemand) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacitySpec_OnDemand.ProtoReflect.Descriptor instead.
func (*CapacitySpec_OnDemand) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{6, 0}
}

type CapacitySpec_Provisioned struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the unit of the provisioned capacity (Temporal Resource Units)
	Value         float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CapacitySpec_Provisioned) Reset() {
	*x = CapacitySpec_Provisioned{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapacitySpec_Provisioned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapacitySpec_Provisioned) ProtoMessage() {}

func (x *CapacitySpec_Provisioned) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapacitySpec_Provisioned.ProtoReflect.Descriptor instead.
func (*CapacitySpec_Provisioned) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{6, 1}
}

func (x *CapacitySpec_Provisioned) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// temporal:dev
type Capacity_OnDemand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capacity_OnDemand) Reset() {
	*x = Capacity_OnDemand{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capacity_OnDemand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capacity_OnDemand) ProtoMessage() {}

func (x *Capacity_OnDemand) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capacity_OnDemand.ProtoReflect.Descriptor instead.
func (*Capacity_OnDemand) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{7, 0}
}

// temporal:dev
type Capacity_Provisioned struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the current unit of the provisioned capacity (Temporal Resource Units)
	CurrentValue  float64 `protobuf:"fixed64,1,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capacity_Provisioned) Reset() {
	*x = Capacity_Provisioned{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capacity_Provisioned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capacity_Provisioned) ProtoMessage() {}

func (x *Capacity_Provisioned) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capacity_Provisioned.ProtoReflect.Descriptor instead.
func (*Capacity_Provisioned) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Capacity_Provisioned) GetCurrentValue() float64 {
	if x != nil {
		return x.CurrentValue
	}
	return 0
}

// temporal:dev
type Capacity_Request struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the current state of the capacity request (e.g. in-progress, completed, failed)
	State Capacity_Request_State `protobuf:"varint,1,opt,name=state,proto3,enum=temporal.api.cloud.namespace.v1.Capacity_Request_State" json:"state,omitempty"`
	// The date and time when the capacity request was created.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The date and time when the capacity request was completed or failed.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The id of the async operation that is creating/updating/deleting the capacity, if any.
	AsyncOperationId string `protobuf:"bytes,4,opt,name=async_operation_id,json=asyncOperationId,proto3" json:"async_operation_id,omitempty"`
	// The requested capacity specification.
	Spec          *CapacitySpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Capacity_Request) Reset() {
	*x = Capacity_Request{}
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Capacity_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capacity_Request) ProtoMessage() {}

func (x *Capacity_Request) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capacity_Request.ProtoReflect.Descriptor instead.
func (*Capacity_Request) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Capacity_Request) GetState() Capacity_Request_State {
	if x != nil {
		return x.State
	}
	return Capacity_Request_STATE_CAPACITY_REQUEST_UNSPECIFIED
}

func (x *Capacity_Request) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Capacity_Request) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Capacity_Request) GetAsyncOperationId() string {
	if x != nil {
		return x.AsyncOperationId
	}
	return ""
}

func (x *Capacity_Request) GetSpec() *CapacitySpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

var File_temporal_api_cloud_namespace_v1_message_proto protoreflect.FileDescriptor

var file_temporal_api_cloud_namespace_v1_message_proto_rawDesc = string([]byte{
	0x0a, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x2c, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x28, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc7, 0x01, 0x0a, 0x15, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x13, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x38, 0x0a, 0x18, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x0c, 0x4d, 0x74,
	0x6c, 0x73, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61,
	0x5f, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x61, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x12, 0x67, 0x0a, 0x13, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x12, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x2a,
	0x0a, 0x0e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x49, 0x0a, 0x0d, 0x4c, 0x69,
	0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x03, 0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x70, 0x61, 0x73, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x47, 0x0a, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x75, 0x0a, 0x14, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x12, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0xbe, 0x01, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x63, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x1a, 0x3c, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x22, 0x50, 0x0a, 0x14, 0x48, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x66, 0x61,
	0x69, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c,
	0x6f, 0x76, 0x65, 0x72, 0x22, 0xfd, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x53, 0x70, 0x65, 0x63, 0x12, 0x55, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5d, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x1a, 0x0a, 0x0a, 0x08, 0x4f,
	0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x23, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x22, 0xc3, 0x06, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x51, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x4f, 0x6e, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x59, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12,
	0x58, 0x0a, 0x0e, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x6c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x4f, 0x6e, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x32, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xde, 0x03, 0x0a, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43,
	0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54,
	0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x94, 0x0b, 0x0a, 0x0d, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x4a, 0x0a, 0x09, 0x6d, 0x74, 0x6c, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x74, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x08, 0x6d, 0x74, 0x6c, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x51, 0x0a,
	0x0c, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x88, 0x01, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x11, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x53,
	0x0a, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61,
	0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x62, 0x0a, 0x11, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x10, 0x68, 0x69, 0x67, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x1a, 0x49, 0x0a,
	0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x87, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x58, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x42, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xac, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x45,
	0x41, 0x52, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52,
	0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x41,
	0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x55,
	0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x4f, 0x4f, 0x4c, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x07, 0x22, 0x7b, 0x0a, 0x09, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x65, 0x62, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x6d, 0x74, 0x6c, 0x73, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x74, 0x6c, 0x73,
	0x47, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67,
	0x72, 0x70, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x67, 0x72, 0x70, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbd,
	0x01, 0x0a, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3f, 0x0a,
	0x1c, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x87,
	0x01, 0x0a, 0x12, 0x41, 0x57, 0x53, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x72, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x41, 0x72, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x76,
	0x70, 0x63, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x17, 0x76, 0x70, 0x63, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x10, 0x61, 0x77, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x77, 0x73, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xef, 0x09, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x06, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x15, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x0d, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a,
	0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x45, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x77, 0x0a, 0x11, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc5, 0x02, 0x0a, 0x15, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x6b,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x02, 0x73, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x33, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x02, 0x73, 0x33, 0x12, 0x35, 0x0a, 0x03, 0x67, 0x63, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x43, 0x53, 0x53, 0x70, 0x65, 0x63, 0x52, 0x03, 0x67, 0x63, 0x73, 0x22, 0xdb, 0x04,
	0x0a, 0x0a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x43, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x69,
	0x6e, 0x6b, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x06, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x48,
	0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x42, 0xb1, 0x01, 0x0a, 0x22,
	0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0xaa, 0x02, 0x21, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f,
	0x2e, 0x41, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xea, 0x02, 0x25, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x69, 0x6f, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x3a, 0x3a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_temporal_api_cloud_namespace_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_cloud_namespace_v1_message_proto_rawDescData []byte
)

func file_temporal_api_cloud_namespace_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_cloud_namespace_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_cloud_namespace_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_api_cloud_namespace_v1_message_proto_rawDesc), len(file_temporal_api_cloud_namespace_v1_message_proto_rawDesc)))
	})
	return file_temporal_api_cloud_namespace_v1_message_proto_rawDescData
}

var file_temporal_api_cloud_namespace_v1_message_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_temporal_api_cloud_namespace_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_temporal_api_cloud_namespace_v1_message_proto_goTypes = []any{
	(Capacity_Request_State)(0),                             // 0: temporal.api.cloud.namespace.v1.Capacity.Request.State
	(NamespaceSpec_SearchAttributeType)(0),                  // 1: temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributeType
	(NamespaceRegionStatus_State)(0),                        // 2: temporal.api.cloud.namespace.v1.NamespaceRegionStatus.State
	(ExportSink_Health)(0),                                  // 3: temporal.api.cloud.namespace.v1.ExportSink.Health
	(*CertificateFilterSpec)(nil),                           // 4: temporal.api.cloud.namespace.v1.CertificateFilterSpec
	(*MtlsAuthSpec)(nil),                                    // 5: temporal.api.cloud.namespace.v1.MtlsAuthSpec
	(*ApiKeyAuthSpec)(nil),                                  // 6: temporal.api.cloud.namespace.v1.ApiKeyAuthSpec
	(*LifecycleSpec)(nil),                                   // 7: temporal.api.cloud.namespace.v1.LifecycleSpec
	(*CodecServerSpec)(nil),                                 // 8: temporal.api.cloud.namespace.v1.CodecServerSpec
	(*HighAvailabilitySpec)(nil),                            // 9: temporal.api.cloud.namespace.v1.HighAvailabilitySpec
	(*CapacitySpec)(nil),                                    // 10: temporal.api.cloud.namespace.v1.CapacitySpec
	(*Capacity)(nil),                                        // 11: temporal.api.cloud.namespace.v1.Capacity
	(*NamespaceSpec)(nil),                                   // 12: temporal.api.cloud.namespace.v1.NamespaceSpec
	(*Endpoints)(nil),                                       // 13: temporal.api.cloud.namespace.v1.Endpoints
	(*Limits)(nil),                                          // 14: temporal.api.cloud.namespace.v1.Limits
	(*AWSPrivateLinkInfo)(nil),                              // 15: temporal.api.cloud.namespace.v1.AWSPrivateLinkInfo
	(*PrivateConnectivity)(nil),                             // 16: temporal.api.cloud.namespace.v1.PrivateConnectivity
	(*Namespace)(nil),                                       // 17: temporal.api.cloud.namespace.v1.Namespace
	(*NamespaceRegionStatus)(nil),                           // 18: temporal.api.cloud.namespace.v1.NamespaceRegionStatus
	(*ExportSinkSpec)(nil),                                  // 19: temporal.api.cloud.namespace.v1.ExportSinkSpec
	(*ExportSink)(nil),                                      // 20: temporal.api.cloud.namespace.v1.ExportSink
	(*CodecServerSpec_CustomErrorMessage)(nil),              // 21: temporal.api.cloud.namespace.v1.CodecServerSpec.CustomErrorMessage
	(*CodecServerSpec_CustomErrorMessage_ErrorMessage)(nil), // 22: temporal.api.cloud.namespace.v1.CodecServerSpec.CustomErrorMessage.ErrorMessage
	(*CapacitySpec_OnDemand)(nil),                           // 23: temporal.api.cloud.namespace.v1.CapacitySpec.OnDemand
	(*CapacitySpec_Provisioned)(nil),                        // 24: temporal.api.cloud.namespace.v1.CapacitySpec.Provisioned
	(*Capacity_OnDemand)(nil),                               // 25: temporal.api.cloud.namespace.v1.Capacity.OnDemand
	(*Capacity_Provisioned)(nil),                            // 26: temporal.api.cloud.namespace.v1.Capacity.Provisioned
	(*Capacity_Request)(nil),                                // 27: temporal.api.cloud.namespace.v1.Capacity.Request
	nil,                                                     // 28: temporal.api.cloud.namespace.v1.NamespaceSpec.CustomSearchAttributesEntry
	nil,                                                     // 29: temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributesEntry
	nil,                                                     // 30: temporal.api.cloud.namespace.v1.Namespace.RegionStatusEntry
	nil,                                                     // 31: temporal.api.cloud.namespace.v1.Namespace.TagsEntry
	(v1.ResourceState)(0),                                   // 32: temporal.api.cloud.resource.v1.ResourceState
	(*timestamppb.Timestamp)(nil),                           // 33: google.protobuf.Timestamp
	(*v11.ConnectivityRule)(nil),                            // 34: temporal.api.cloud.connectivityrule.v1.ConnectivityRule
	(*v12.S3Spec)(nil),                                      // 35: temporal.api.cloud.sink.v1.S3Spec
	(*v12.GCSSpec)(nil),                                     // 36: temporal.api.cloud.sink.v1.GCSSpec
}
var file_temporal_api_cloud_namespace_v1_message_proto_depIdxs = []int32{
	4,  // 0: temporal.api.cloud.namespace.v1.MtlsAuthSpec.certificate_filters:type_name -> temporal.api.cloud.namespace.v1.CertificateFilterSpec
	21, // 1: temporal.api.cloud.namespace.v1.CodecServerSpec.custom_error_message:type_name -> temporal.api.cloud.namespace.v1.CodecServerSpec.CustomErrorMessage
	23, // 2: temporal.api.cloud.namespace.v1.CapacitySpec.on_demand:type_name -> temporal.api.cloud.namespace.v1.CapacitySpec.OnDemand
	24, // 3: temporal.api.cloud.namespace.v1.CapacitySpec.provisioned:type_name -> temporal.api.cloud.namespace.v1.CapacitySpec.Provisioned
	25, // 4: temporal.api.cloud.namespace.v1.Capacity.on_demand:type_name -> temporal.api.cloud.namespace.v1.Capacity.OnDemand
	26, // 5: temporal.api.cloud.namespace.v1.Capacity.provisioned:type_name -> temporal.api.cloud.namespace.v1.Capacity.Provisioned
	27, // 6: temporal.api.cloud.namespace.v1.Capacity.latest_request:type_name -> temporal.api.cloud.namespace.v1.Capacity.Request
	5,  // 7: temporal.api.cloud.namespace.v1.NamespaceSpec.mtls_auth:type_name -> temporal.api.cloud.namespace.v1.MtlsAuthSpec
	6,  // 8: temporal.api.cloud.namespace.v1.NamespaceSpec.api_key_auth:type_name -> temporal.api.cloud.namespace.v1.ApiKeyAuthSpec
	28, // 9: temporal.api.cloud.namespace.v1.NamespaceSpec.custom_search_attributes:type_name -> temporal.api.cloud.namespace.v1.NamespaceSpec.CustomSearchAttributesEntry
	29, // 10: temporal.api.cloud.namespace.v1.NamespaceSpec.search_attributes:type_name -> temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributesEntry
	8,  // 11: temporal.api.cloud.namespace.v1.NamespaceSpec.codec_server:type_name -> temporal.api.cloud.namespace.v1.CodecServerSpec
	7,  // 12: temporal.api.cloud.namespace.v1.NamespaceSpec.lifecycle:type_name -> temporal.api.cloud.namespace.v1.LifecycleSpec
	9,  // 13: temporal.api.cloud.namespace.v1.NamespaceSpec.high_availability:type_name -> temporal.api.cloud.namespace.v1.HighAvailabilitySpec
	10, // 14: temporal.api.cloud.namespace.v1.NamespaceSpec.capacity_spec:type_name -> temporal.api.cloud.namespace.v1.CapacitySpec
	15, // 15: temporal.api.cloud.namespace.v1.PrivateConnectivity.aws_private_link:type_name -> temporal.api.cloud.namespace.v1.AWSPrivateLinkInfo
	12, // 16: temporal.api.cloud.namespace.v1.Namespace.spec:type_name -> temporal.api.cloud.namespace.v1.NamespaceSpec
	32, // 17: temporal.api.cloud.namespace.v1.Namespace.state:type_name -> temporal.api.cloud.resource.v1.ResourceState
	13, // 18: temporal.api.cloud.namespace.v1.Namespace.endpoints:type_name -> temporal.api.cloud.namespace.v1.Endpoints
	14, // 19: temporal.api.cloud.namespace.v1.Namespace.limits:type_name -> temporal.api.cloud.namespace.v1.Limits
	16, // 20: temporal.api.cloud.namespace.v1.Namespace.private_connectivities:type_name -> temporal.api.cloud.namespace.v1.PrivateConnectivity
	33, // 21: temporal.api.cloud.namespace.v1.Namespace.created_time:type_name -> google.protobuf.Timestamp
	33, // 22: temporal.api.cloud.namespace.v1.Namespace.last_modified_time:type_name -> google.protobuf.Timestamp
	30, // 23: temporal.api.cloud.namespace.v1.Namespace.region_status:type_name -> temporal.api.cloud.namespace.v1.Namespace.RegionStatusEntry
	34, // 24: temporal.api.cloud.namespace.v1.Namespace.connectivity_rules:type_name -> temporal.api.cloud.connectivityrule.v1.ConnectivityRule
	31, // 25: temporal.api.cloud.namespace.v1.Namespace.tags:type_name -> temporal.api.cloud.namespace.v1.Namespace.TagsEntry
	11, // 26: temporal.api.cloud.namespace.v1.Namespace.capacity:type_name -> temporal.api.cloud.namespace.v1.Capacity
	2,  // 27: temporal.api.cloud.namespace.v1.NamespaceRegionStatus.state:type_name -> temporal.api.cloud.namespace.v1.NamespaceRegionStatus.State
	35, // 28: temporal.api.cloud.namespace.v1.ExportSinkSpec.s3:type_name -> temporal.api.cloud.sink.v1.S3Spec
	36, // 29: temporal.api.cloud.namespace.v1.ExportSinkSpec.gcs:type_name -> temporal.api.cloud.sink.v1.GCSSpec
	32, // 30: temporal.api.cloud.namespace.v1.ExportSink.state:type_name -> temporal.api.cloud.resource.v1.ResourceState
	19, // 31: temporal.api.cloud.namespace.v1.ExportSink.spec:type_name -> temporal.api.cloud.namespace.v1.ExportSinkSpec
	3,  // 32: temporal.api.cloud.namespace.v1.ExportSink.health:type_name -> temporal.api.cloud.namespace.v1.ExportSink.Health
	33, // 33: temporal.api.cloud.namespace.v1.ExportSink.latest_data_export_time:type_name -> google.protobuf.Timestamp
	33, // 34: temporal.api.cloud.namespace.v1.ExportSink.last_health_check_time:type_name -> google.protobuf.Timestamp
	22, // 35: temporal.api.cloud.namespace.v1.CodecServerSpec.CustomErrorMessage.default:type_name -> temporal.api.cloud.namespace.v1.CodecServerSpec.CustomErrorMessage.ErrorMessage
	0,  // 36: temporal.api.cloud.namespace.v1.Capacity.Request.state:type_name -> temporal.api.cloud.namespace.v1.Capacity.Request.State
	33, // 37: temporal.api.cloud.namespace.v1.Capacity.Request.start_time:type_name -> google.protobuf.Timestamp
	33, // 38: temporal.api.cloud.namespace.v1.Capacity.Request.end_time:type_name -> google.protobuf.Timestamp
	10, // 39: temporal.api.cloud.namespace.v1.Capacity.Request.spec:type_name -> temporal.api.cloud.namespace.v1.CapacitySpec
	1,  // 40: temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributesEntry.value:type_name -> temporal.api.cloud.namespace.v1.NamespaceSpec.SearchAttributeType
	18, // 41: temporal.api.cloud.namespace.v1.Namespace.RegionStatusEntry.value:type_name -> temporal.api.cloud.namespace.v1.NamespaceRegionStatus
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_temporal_api_cloud_namespace_v1_message_proto_init() }
func file_temporal_api_cloud_namespace_v1_message_proto_init() {
	if File_temporal_api_cloud_namespace_v1_message_proto != nil {
		return
	}
	file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[6].OneofWrappers = []any{
		(*CapacitySpec_OnDemand_)(nil),
		(*CapacitySpec_Provisioned_)(nil),
	}
	file_temporal_api_cloud_namespace_v1_message_proto_msgTypes[7].OneofWrappers = []any{
		(*Capacity_OnDemand_)(nil),
		(*Capacity_Provisioned_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_api_cloud_namespace_v1_message_proto_rawDesc), len(file_temporal_api_cloud_namespace_v1_message_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_cloud_namespace_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_cloud_namespace_v1_message_proto_depIdxs,
		EnumInfos:         file_temporal_api_cloud_namespace_v1_message_proto_enumTypes,
		MessageInfos:      file_temporal_api_cloud_namespace_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_cloud_namespace_v1_message_proto = out.File
	file_temporal_api_cloud_namespace_v1_message_proto_goTypes = nil
	file_temporal_api_cloud_namespace_v1_message_proto_depIdxs = nil
}
